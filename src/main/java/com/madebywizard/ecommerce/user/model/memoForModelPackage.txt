User:
A 'User' is a class that will be linked to the database: this is an Entity (jpa).
The user contains:
- Id (generated automatically and will be used from the database)
- name (a full name)
- sex (user's sex -> 'M' or 'F')
- birth date (user's birth date -> data type is java.sql.Date because this will be used in mysql)
- user id (user's id that will be used in the service -> an alphanumerical string (should have a length limit)
- user password (this should not be stored directly into our database -> should be ENCRYPTED)

* @NotNull and @Pattern(regexp = 'M|F')
- These annotations are provided by Jakarta Validation API and they can be used for validating columns.
However, in this project we will just create a 'UserValidator' object and implement it with if statements
to understand and study validators.
Furthermore, there is another annotation called @Valid which can be include in controller method to check the validation
that includes certain annotations such as @NotNull, @Pattern, @Size, and @PositiveOrZero etc.


* DateTimeFormatter
- The 'DateTimeFormatter' formats the LocalDateTime to a specific pattern -> in our case, we should use the
pattern "yyyy-MM-dd" because we should store the LocalDateTime into our database (the database includes a birth


* UserDTO:
DTO: a data transfer object that carries data between system processes.
can be used between the API and server without exposing important information such as password or personal information.
A 'UserDTO' only carries the raw id, user's name, and user's id.


* ErrorResponse:
The 'ErrorResponse' is another model for handling exceptions. It only contains a 'message' (String) as an attribute
which we can customize the size or the property of the error message.


