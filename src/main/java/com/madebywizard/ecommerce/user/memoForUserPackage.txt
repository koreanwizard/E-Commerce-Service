UserController:
    HTTP Requests are created while users interacting a web browser (ex: chrome).

    The server receives and response to these requests,
    while observing the database to get or send data back to the web browser.

    HTTP Request:
    - URL (ex: www.google.com/business/)
    - query string parameters
    - header
    - request body.

    HTTP Response:
    - response body (or String),
    - HTTP Status
    ex) 200 OK -> request succeeded
    ex) 400 Bad Request -> server cannot or will not process the request due to specific errors).


'UserController' HTTP Methods and CRUD:


    * createUser (@PostMapping)
        - RequestBody is a 'User' object and returns the 'UserDTO' by calling 'execute' method from 'CreateUserService'




    * getUsers (every user) (@GetMapping)



    * searchProductByLastName (@GetMapping)
        - If I pass in a non-existing query variable (ex: product/search?lastName=NonExistingLastName)
          or if I don't pass anything (ex: product/search?lastName=) these still works.
          However, if we never mentioned the query variable in the first place
          (ex: product/search) this will give an error ("Required parameter 'lastName' is not present.")
          These tests are done from 'Postman' (an API platform).





* search product by last name (@GetMapping)





* updateUser (@PutMapping)






* deleteUser (@DeleteMapping)






UserRepository:
    An interface that extends the JpaRepository with 'User' generic and 'Integer' ID.
    This provides free JpaRepository methods that helps to read or modify data from the database.
    ex) findAll(), deleteAll()

    If there is a query that is too complex for JPA, we can create a custom query by using @Query annotation.
    ex) @Query(SELECT user FROM User user WHERE user.lastName LIKE %:keyword%)

    * findByLastNameContaining
        - The 'Containing' keyword refers following JPQL snippet:
        SELECT u FROM User u WHERE u.lastName LIKE CONCAT('%', :keyword, '%')
        This is almost same as the raw customized query from above, but it includes the CONCAT.
        It is a JPQL function that joins two or more strings into one string.





@PathVariable: used when the value (ex: 'id') is a part of the URL structure
@RequestParam: used when passing optional filters (ex: 'lastName')
We can specify the exact path/query variable after these annotations.
@RequestParam("lastName"): annotation 뒤에 들어가는 optional query variable를 표시해주니까
podman에서 테스트해볼때 에러가 안 났었음.

